{"version":3,"sources":["logo.svg","components/gallery/getPhotoGallery.js","components/gallery/getErrorMessage.js","components/gallery/getURLWithPathname.js","components/gallery/Gallery.js","components/gallery/getPhotoLimit.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Photo","React","lazy","e","then","bind","getErrorMessage","exampleUrl","loc","window","location","pathname","host","getURLWithPathname","react_default","a","createElement","style","fontWeight","textAlign","width","Gallery","state","photos","limit","_this2","this","setState","search","substr","split","axios","get","res","data","content","map","photo","Col_default","key","id","xs","md","react","fallback","src","url","alt","title","Container_default","Row_default","Component","App","className","logo","Gallery_Gallery","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2UCElCC,EAAQC,IAAMC,KAAK,kBAAMJ,EAAAK,EAAA,GAAAC,KAAAN,EAAAO,KAAA,YCChB,SAASC,IACtB,IAAMC,ECJO,WACb,IAAMC,EAAMC,OAAOC,SACnB,MAAqB,MAAjBF,EAAIG,SACCH,EAAII,KAENJ,EAAII,KAAOJ,EAAIG,SDDHE,GAAuB,iBAC1C,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAOA,GACVH,EAAAC,EAAAC,cAAA,2DACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,6DACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,yBAAiBT,IAKvB,IAAMU,EAAQ,CACZC,WAAY,OACZC,UAAW,SACXC,MAAO,QEXYC,6MACnBC,MAAQ,CACNC,OAAQ,GACRC,MAAO,sFAGW,IAAAC,EAAAC,KAClBA,KAAKC,SAAS,CAAEH,MCdXf,OAAOC,SAASkB,OAAOC,OAAO,GAAGC,MAAM,gBAAgB,IDclB,WACpCL,EAAKH,MAAME,MAAQ,GAAKC,EAAKH,MAAME,OAAS,KAC9CO,IACGC,IACC,uDACEP,EAAKH,MAAME,OAEdpB,KAAK,SAAA6B,GAAG,OAAIR,EAAKE,SAAS,CAAEJ,OAAQU,EAAIC,4CAM/C,IAAIC,EAMJ,OAJEA,EADET,KAAKJ,MAAME,MAAQ,EACKE,KAAKJ,MAAMC,OHzB3Ba,IAAI,SAAAC,GAAK,OACrBvB,EAAAC,EAAAC,cAACsB,EAAAvB,EAAD,CAAKwB,IAAKF,EAAMG,GAAIC,GAAI,EAAGC,GAAI,GAC7B5B,EAAAC,EAAAC,cAAC2B,EAAA,SAAD,CAAUC,SAAU9B,EAAAC,EAAAC,cAAA,0BAClBF,EAAAC,EAAAC,cAAChB,EAAD,CAAO6C,IAAKR,EAAMS,IAAKC,IAAKV,EAAMW,YGwB1B1C,IAGVQ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,KACED,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,KAAMoB,YA7BqBgB,aEQtBC,MAXf,WACE,OACEtC,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,OACbvC,EAAAC,EAAAC,cAAA,UAAQqC,UAAU,cAChBvC,EAAAC,EAAAC,cAAA,OAAK6B,IAAKS,IAAMD,UAAU,WAAWN,IAAI,UAE3CjC,EAAAC,EAAAC,cAACuC,EAAD,QCCcC,QACW,cAA7B/C,OAAOC,SAAS+C,UAEe,UAA7BhD,OAAOC,SAAS+C,UAEhBhD,OAAOC,SAAS+C,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9D,KAAK,SAAA+D,GACjCA,EAAaC","file":"static/js/main.435d6085.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Suspense } from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nconst Photo = React.lazy(() => import('../Photo'));\r\n\r\nexport default function getPhotoGallery(photos) {\r\n  return photos.map(photo => (\r\n    <Col key={photo.id} xs={6} md={4}>\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Photo src={photo.url} alt={photo.title} />\r\n      </Suspense>\r\n    </Col>\r\n  ));\r\n}\r\n","import React from 'react';\r\nimport getURLWithPathname from './getURLWithPathname';\r\n\r\nexport default function getErrorMessage() {\r\n  const exampleUrl = getURLWithPathname() + '?photo_limit=5';\r\n  return (\r\n    <div style={style}>\r\n      <h1>Please choose a photo_limit between 1 and 100</h1>\r\n      <br />\r\n      <h3>simply add \"?photo_limit=YOURNUMBER\" to the url</h3>\r\n      <br />\r\n      <p>For example: {exampleUrl}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst style = {\r\n  fontWeight: 'bold',\r\n  textAlign: 'center',\r\n  width: '100%'\r\n};\r\n","export default function getURLWithPathname() {\r\n  const loc = window.location;\r\n  if (loc.pathname === '/') {\r\n    return loc.host;\r\n  }\r\n  return loc.host + loc.pathname;\r\n}\r\n","import React, { Component } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport axios from 'axios';\r\nimport getPhotoLimit from './getPhotoLimit';\r\nimport getPhotoGallery from './getPhotoGallery';\r\nimport getErrorMessage from './getErrorMessage';\r\n\r\nexport default class Gallery extends Component {\r\n  state = {\r\n    photos: [],\r\n    limit: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ limit: getPhotoLimit() }, () => {\r\n      if (this.state.limit > 0 && this.state.limit <= 100) {\r\n        axios\r\n          .get(\r\n            'https://jsonplaceholder.typicode.com/photos/?_limit=' +\r\n              this.state.limit\r\n          )\r\n          .then(res => this.setState({ photos: res.data }));\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let content;\r\n    if (this.state.limit > 0) {\r\n      content = getPhotoGallery(this.state.photos);\r\n    } else {\r\n      content = getErrorMessage();\r\n    }\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <Row>{content}</Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export default function getPhotoLimit() {\r\n  return window.location.search.substr(1).split('photo_limit=')[1];\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Gallery from './components/gallery/Gallery';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <Gallery />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}